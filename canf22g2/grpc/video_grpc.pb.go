// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.0
// source: video.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoInfoService_SetVideoSettings_FullMethodName = "/canf22g2.grpc.VideoInfoService/SetVideoSettings"
	VideoInfoService_GetVideoSettings_FullMethodName = "/canf22g2.grpc.VideoInfoService/GetVideoSettings"
)

// VideoInfoServiceClient is the client API for VideoInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoInfoServiceClient interface {
	SetVideoSettings(ctx context.Context, in *SetVideoSettingsRequest, opts ...grpc.CallOption) (*SetVideoSettingsResponse, error)
	GetVideoSettings(ctx context.Context, in *GetVideoSettingsRequest, opts ...grpc.CallOption) (*GetVideoSettingsResponse, error)
}

type videoInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoInfoServiceClient(cc grpc.ClientConnInterface) VideoInfoServiceClient {
	return &videoInfoServiceClient{cc}
}

func (c *videoInfoServiceClient) SetVideoSettings(ctx context.Context, in *SetVideoSettingsRequest, opts ...grpc.CallOption) (*SetVideoSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetVideoSettingsResponse)
	err := c.cc.Invoke(ctx, VideoInfoService_SetVideoSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInfoServiceClient) GetVideoSettings(ctx context.Context, in *GetVideoSettingsRequest, opts ...grpc.CallOption) (*GetVideoSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideoSettingsResponse)
	err := c.cc.Invoke(ctx, VideoInfoService_GetVideoSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoInfoServiceServer is the server API for VideoInfoService service.
// All implementations must embed UnimplementedVideoInfoServiceServer
// for forward compatibility.
type VideoInfoServiceServer interface {
	SetVideoSettings(context.Context, *SetVideoSettingsRequest) (*SetVideoSettingsResponse, error)
	GetVideoSettings(context.Context, *GetVideoSettingsRequest) (*GetVideoSettingsResponse, error)
	mustEmbedUnimplementedVideoInfoServiceServer()
}

// UnimplementedVideoInfoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoInfoServiceServer struct{}

func (UnimplementedVideoInfoServiceServer) SetVideoSettings(context.Context, *SetVideoSettingsRequest) (*SetVideoSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVideoSettings not implemented")
}
func (UnimplementedVideoInfoServiceServer) GetVideoSettings(context.Context, *GetVideoSettingsRequest) (*GetVideoSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoSettings not implemented")
}
func (UnimplementedVideoInfoServiceServer) mustEmbedUnimplementedVideoInfoServiceServer() {}
func (UnimplementedVideoInfoServiceServer) testEmbeddedByValue()                          {}

// UnsafeVideoInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoInfoServiceServer will
// result in compilation errors.
type UnsafeVideoInfoServiceServer interface {
	mustEmbedUnimplementedVideoInfoServiceServer()
}

func RegisterVideoInfoServiceServer(s grpc.ServiceRegistrar, srv VideoInfoServiceServer) {
	// If the following call pancis, it indicates UnimplementedVideoInfoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoInfoService_ServiceDesc, srv)
}

func _VideoInfoService_SetVideoSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVideoSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInfoServiceServer).SetVideoSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInfoService_SetVideoSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInfoServiceServer).SetVideoSettings(ctx, req.(*SetVideoSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInfoService_GetVideoSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInfoServiceServer).GetVideoSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInfoService_GetVideoSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInfoServiceServer).GetVideoSettings(ctx, req.(*GetVideoSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoInfoService_ServiceDesc is the grpc.ServiceDesc for VideoInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "canf22g2.grpc.VideoInfoService",
	HandlerType: (*VideoInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetVideoSettings",
			Handler:    _VideoInfoService_SetVideoSettings_Handler,
		},
		{
			MethodName: "GetVideoSettings",
			Handler:    _VideoInfoService_GetVideoSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}
