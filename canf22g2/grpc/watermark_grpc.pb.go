// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.0
// source: watermark.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WatermarkInfoService_GetAllWatermarkInfo_FullMethodName = "/canf22g2.grpc.WatermarkInfoService/GetAllWatermarkInfo"
	WatermarkInfoService_SetAllWatermarkInfo_FullMethodName = "/canf22g2.grpc.WatermarkInfoService/SetAllWatermarkInfo"
)

// WatermarkInfoServiceClient is the client API for WatermarkInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatermarkInfoServiceClient interface {
	GetAllWatermarkInfo(ctx context.Context, in *GetAllWatermarkInfoRequest, opts ...grpc.CallOption) (*GetAllWatermarkInfoResponse, error)
	SetAllWatermarkInfo(ctx context.Context, in *SetAllWatermarkInfoRequest, opts ...grpc.CallOption) (*SetAllWatermarkInfoResponse, error)
}

type watermarkInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatermarkInfoServiceClient(cc grpc.ClientConnInterface) WatermarkInfoServiceClient {
	return &watermarkInfoServiceClient{cc}
}

func (c *watermarkInfoServiceClient) GetAllWatermarkInfo(ctx context.Context, in *GetAllWatermarkInfoRequest, opts ...grpc.CallOption) (*GetAllWatermarkInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllWatermarkInfoResponse)
	err := c.cc.Invoke(ctx, WatermarkInfoService_GetAllWatermarkInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watermarkInfoServiceClient) SetAllWatermarkInfo(ctx context.Context, in *SetAllWatermarkInfoRequest, opts ...grpc.CallOption) (*SetAllWatermarkInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAllWatermarkInfoResponse)
	err := c.cc.Invoke(ctx, WatermarkInfoService_SetAllWatermarkInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatermarkInfoServiceServer is the server API for WatermarkInfoService service.
// All implementations must embed UnimplementedWatermarkInfoServiceServer
// for forward compatibility.
type WatermarkInfoServiceServer interface {
	GetAllWatermarkInfo(context.Context, *GetAllWatermarkInfoRequest) (*GetAllWatermarkInfoResponse, error)
	SetAllWatermarkInfo(context.Context, *SetAllWatermarkInfoRequest) (*SetAllWatermarkInfoResponse, error)
	mustEmbedUnimplementedWatermarkInfoServiceServer()
}

// UnimplementedWatermarkInfoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWatermarkInfoServiceServer struct{}

func (UnimplementedWatermarkInfoServiceServer) GetAllWatermarkInfo(context.Context, *GetAllWatermarkInfoRequest) (*GetAllWatermarkInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWatermarkInfo not implemented")
}
func (UnimplementedWatermarkInfoServiceServer) SetAllWatermarkInfo(context.Context, *SetAllWatermarkInfoRequest) (*SetAllWatermarkInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAllWatermarkInfo not implemented")
}
func (UnimplementedWatermarkInfoServiceServer) mustEmbedUnimplementedWatermarkInfoServiceServer() {}
func (UnimplementedWatermarkInfoServiceServer) testEmbeddedByValue()                              {}

// UnsafeWatermarkInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatermarkInfoServiceServer will
// result in compilation errors.
type UnsafeWatermarkInfoServiceServer interface {
	mustEmbedUnimplementedWatermarkInfoServiceServer()
}

func RegisterWatermarkInfoServiceServer(s grpc.ServiceRegistrar, srv WatermarkInfoServiceServer) {
	// If the following call pancis, it indicates UnimplementedWatermarkInfoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WatermarkInfoService_ServiceDesc, srv)
}

func _WatermarkInfoService_GetAllWatermarkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWatermarkInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatermarkInfoServiceServer).GetAllWatermarkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatermarkInfoService_GetAllWatermarkInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatermarkInfoServiceServer).GetAllWatermarkInfo(ctx, req.(*GetAllWatermarkInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatermarkInfoService_SetAllWatermarkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAllWatermarkInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatermarkInfoServiceServer).SetAllWatermarkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatermarkInfoService_SetAllWatermarkInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatermarkInfoServiceServer).SetAllWatermarkInfo(ctx, req.(*SetAllWatermarkInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WatermarkInfoService_ServiceDesc is the grpc.ServiceDesc for WatermarkInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatermarkInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "canf22g2.grpc.WatermarkInfoService",
	HandlerType: (*WatermarkInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllWatermarkInfo",
			Handler:    _WatermarkInfoService_GetAllWatermarkInfo_Handler,
		},
		{
			MethodName: "SetAllWatermarkInfo",
			Handler:    _WatermarkInfoService_SetAllWatermarkInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "watermark.proto",
}
