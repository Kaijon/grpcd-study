// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.12.0
// source: video.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Video
type SetVideoSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resolution      string `protobuf:"bytes,1,opt,name=Resolution,proto3" json:"Resolution,omitempty"`
	StreamFormat    string `protobuf:"bytes,2,opt,name=StreamFormat,proto3" json:"StreamFormat,omitempty"`
	BitRate         uint32 `protobuf:"varint,3,opt,name=BitRate,proto3" json:"BitRate,omitempty"`
	Type            string `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Fps             uint32 `protobuf:"varint,5,opt,name=Fps,proto3" json:"Fps,omitempty"`
	Channel         int32  `protobuf:"varint,6,opt,name=channel,proto3" json:"channel,omitempty"`
	SubResolution   string `protobuf:"bytes,7,opt,name=SubResolution,proto3" json:"SubResolution,omitempty"`
	SubStreamFormat string `protobuf:"bytes,8,opt,name=SubStreamFormat,proto3" json:"SubStreamFormat,omitempty"`
	SubBitRate      uint32 `protobuf:"varint,9,opt,name=SubBitRate,proto3" json:"SubBitRate,omitempty"`
	SubType         string `protobuf:"bytes,10,opt,name=SubType,proto3" json:"SubType,omitempty"`
	SubFps          uint32 `protobuf:"varint,11,opt,name=SubFps,proto3" json:"SubFps,omitempty"`
	MirrorAction    string `protobuf:"bytes,12,opt,name=MirrorAction,proto3" json:"MirrorAction,omitempty"`
}

func (x *SetVideoSettingsRequest) Reset() {
	*x = SetVideoSettingsRequest{}
	mi := &file_video_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetVideoSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVideoSettingsRequest) ProtoMessage() {}

func (x *SetVideoSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVideoSettingsRequest.ProtoReflect.Descriptor instead.
func (*SetVideoSettingsRequest) Descriptor() ([]byte, []int) {
	return file_video_proto_rawDescGZIP(), []int{0}
}

func (x *SetVideoSettingsRequest) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

func (x *SetVideoSettingsRequest) GetStreamFormat() string {
	if x != nil {
		return x.StreamFormat
	}
	return ""
}

func (x *SetVideoSettingsRequest) GetBitRate() uint32 {
	if x != nil {
		return x.BitRate
	}
	return 0
}

func (x *SetVideoSettingsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SetVideoSettingsRequest) GetFps() uint32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *SetVideoSettingsRequest) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *SetVideoSettingsRequest) GetSubResolution() string {
	if x != nil {
		return x.SubResolution
	}
	return ""
}

func (x *SetVideoSettingsRequest) GetSubStreamFormat() string {
	if x != nil {
		return x.SubStreamFormat
	}
	return ""
}

func (x *SetVideoSettingsRequest) GetSubBitRate() uint32 {
	if x != nil {
		return x.SubBitRate
	}
	return 0
}

func (x *SetVideoSettingsRequest) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *SetVideoSettingsRequest) GetSubFps() uint32 {
	if x != nil {
		return x.SubFps
	}
	return 0
}

func (x *SetVideoSettingsRequest) GetMirrorAction() string {
	if x != nil {
		return x.MirrorAction
	}
	return ""
}

type SetVideoSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SetVideoSettingsResponse) Reset() {
	*x = SetVideoSettingsResponse{}
	mi := &file_video_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetVideoSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVideoSettingsResponse) ProtoMessage() {}

func (x *SetVideoSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVideoSettingsResponse.ProtoReflect.Descriptor instead.
func (*SetVideoSettingsResponse) Descriptor() ([]byte, []int) {
	return file_video_proto_rawDescGZIP(), []int{1}
}

func (x *SetVideoSettingsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetVideoSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel int32 `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"` // Channel identifier
}

func (x *GetVideoSettingsRequest) Reset() {
	*x = GetVideoSettingsRequest{}
	mi := &file_video_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVideoSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoSettingsRequest) ProtoMessage() {}

func (x *GetVideoSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetVideoSettingsRequest) Descriptor() ([]byte, []int) {
	return file_video_proto_rawDescGZIP(), []int{2}
}

func (x *GetVideoSettingsRequest) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

type GetVideoSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resolution      string `protobuf:"bytes,1,opt,name=Resolution,proto3" json:"Resolution,omitempty"`
	StreamFormat    string `protobuf:"bytes,2,opt,name=StreamFormat,proto3" json:"StreamFormat,omitempty"`
	BitRate         uint32 `protobuf:"varint,3,opt,name=BitRate,proto3" json:"BitRate,omitempty"`
	Type            string `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Fps             uint32 `protobuf:"varint,5,opt,name=Fps,proto3" json:"Fps,omitempty"`
	SubResolution   string `protobuf:"bytes,6,opt,name=SubResolution,proto3" json:"SubResolution,omitempty"`
	SubStreamFormat string `protobuf:"bytes,7,opt,name=SubStreamFormat,proto3" json:"SubStreamFormat,omitempty"`
	SubBitRate      uint32 `protobuf:"varint,8,opt,name=SubBitRate,proto3" json:"SubBitRate,omitempty"`
	SubType         string `protobuf:"bytes,9,opt,name=SubType,proto3" json:"SubType,omitempty"`
	SubFps          uint32 `protobuf:"varint,10,opt,name=SubFps,proto3" json:"SubFps,omitempty"`
	MirrorAction    string `protobuf:"bytes,11,opt,name=MirrorAction,proto3" json:"MirrorAction,omitempty"`
}

func (x *GetVideoSettingsResponse) Reset() {
	*x = GetVideoSettingsResponse{}
	mi := &file_video_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVideoSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoSettingsResponse) ProtoMessage() {}

func (x *GetVideoSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetVideoSettingsResponse) Descriptor() ([]byte, []int) {
	return file_video_proto_rawDescGZIP(), []int{3}
}

func (x *GetVideoSettingsResponse) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

func (x *GetVideoSettingsResponse) GetStreamFormat() string {
	if x != nil {
		return x.StreamFormat
	}
	return ""
}

func (x *GetVideoSettingsResponse) GetBitRate() uint32 {
	if x != nil {
		return x.BitRate
	}
	return 0
}

func (x *GetVideoSettingsResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetVideoSettingsResponse) GetFps() uint32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *GetVideoSettingsResponse) GetSubResolution() string {
	if x != nil {
		return x.SubResolution
	}
	return ""
}

func (x *GetVideoSettingsResponse) GetSubStreamFormat() string {
	if x != nil {
		return x.SubStreamFormat
	}
	return ""
}

func (x *GetVideoSettingsResponse) GetSubBitRate() uint32 {
	if x != nil {
		return x.SubBitRate
	}
	return 0
}

func (x *GetVideoSettingsResponse) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *GetVideoSettingsResponse) GetSubFps() uint32 {
	if x != nil {
		return x.SubFps
	}
	return 0
}

func (x *GetVideoSettingsResponse) GetMirrorAction() string {
	if x != nil {
		return x.MirrorAction
	}
	return ""
}

var File_video_proto protoreflect.FileDescriptor

var file_video_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63,
	0x61, 0x6e, 0x66, 0x32, 0x32, 0x67, 0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x22, 0xfd, 0x02, 0x0a,
	0x17, 0x53, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x42,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x70,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x46, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53,
	0x75, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x53, 0x75, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x75, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x42, 0x69, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x75, 0x62, 0x42,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x46, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x53, 0x75, 0x62, 0x46, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x18,
	0x53, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x33, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xe4, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x42, 0x69, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x70, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x46, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x53, 0x75, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x53, 0x75, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x75, 0x62, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x42,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x75,
	0x62, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x46, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x53, 0x75, 0x62, 0x46, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xe0,
	0x01, 0x0a, 0x10, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x61, 0x6e, 0x66, 0x32, 0x32,
	0x67, 0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x63, 0x61, 0x6e, 0x66, 0x32, 0x32, 0x67, 0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26,
	0x2e, 0x63, 0x61, 0x6e, 0x66, 0x32, 0x32, 0x67, 0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x61, 0x6e, 0x66, 0x32, 0x32, 0x67,
	0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x63, 0x61, 0x6e, 0x66, 0x32, 0x32, 0x67, 0x32, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_video_proto_rawDescOnce sync.Once
	file_video_proto_rawDescData = file_video_proto_rawDesc
)

func file_video_proto_rawDescGZIP() []byte {
	file_video_proto_rawDescOnce.Do(func() {
		file_video_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_proto_rawDescData)
	})
	return file_video_proto_rawDescData
}

var file_video_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_video_proto_goTypes = []any{
	(*SetVideoSettingsRequest)(nil),  // 0: canf22g2.grpc.SetVideoSettingsRequest
	(*SetVideoSettingsResponse)(nil), // 1: canf22g2.grpc.SetVideoSettingsResponse
	(*GetVideoSettingsRequest)(nil),  // 2: canf22g2.grpc.GetVideoSettingsRequest
	(*GetVideoSettingsResponse)(nil), // 3: canf22g2.grpc.GetVideoSettingsResponse
}
var file_video_proto_depIdxs = []int32{
	0, // 0: canf22g2.grpc.VideoInfoService.SetVideoSettings:input_type -> canf22g2.grpc.SetVideoSettingsRequest
	2, // 1: canf22g2.grpc.VideoInfoService.GetVideoSettings:input_type -> canf22g2.grpc.GetVideoSettingsRequest
	1, // 2: canf22g2.grpc.VideoInfoService.SetVideoSettings:output_type -> canf22g2.grpc.SetVideoSettingsResponse
	3, // 3: canf22g2.grpc.VideoInfoService.GetVideoSettings:output_type -> canf22g2.grpc.GetVideoSettingsResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_video_proto_init() }
func file_video_proto_init() {
	if File_video_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_video_proto_goTypes,
		DependencyIndexes: file_video_proto_depIdxs,
		MessageInfos:      file_video_proto_msgTypes,
	}.Build()
	File_video_proto = out.File
	file_video_proto_rawDesc = nil
	file_video_proto_goTypes = nil
	file_video_proto_depIdxs = nil
}
