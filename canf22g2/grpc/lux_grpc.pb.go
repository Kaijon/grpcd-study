// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.0
// source: lux.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LuxService_GetDayNightMode_FullMethodName = "/canf22g2.grpc.LuxService/GetDayNightMode"
)

// LuxServiceClient is the client API for LuxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LuxServiceClient interface {
	GetDayNightMode(ctx context.Context, in *GetDayNightModeRequest, opts ...grpc.CallOption) (*GetDayNightModeResponse, error)
}

type luxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLuxServiceClient(cc grpc.ClientConnInterface) LuxServiceClient {
	return &luxServiceClient{cc}
}

func (c *luxServiceClient) GetDayNightMode(ctx context.Context, in *GetDayNightModeRequest, opts ...grpc.CallOption) (*GetDayNightModeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDayNightModeResponse)
	err := c.cc.Invoke(ctx, LuxService_GetDayNightMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LuxServiceServer is the server API for LuxService service.
// All implementations must embed UnimplementedLuxServiceServer
// for forward compatibility.
type LuxServiceServer interface {
	GetDayNightMode(context.Context, *GetDayNightModeRequest) (*GetDayNightModeResponse, error)
	mustEmbedUnimplementedLuxServiceServer()
}

// UnimplementedLuxServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLuxServiceServer struct{}

func (UnimplementedLuxServiceServer) GetDayNightMode(context.Context, *GetDayNightModeRequest) (*GetDayNightModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDayNightMode not implemented")
}
func (UnimplementedLuxServiceServer) mustEmbedUnimplementedLuxServiceServer() {}
func (UnimplementedLuxServiceServer) testEmbeddedByValue()                    {}

// UnsafeLuxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LuxServiceServer will
// result in compilation errors.
type UnsafeLuxServiceServer interface {
	mustEmbedUnimplementedLuxServiceServer()
}

func RegisterLuxServiceServer(s grpc.ServiceRegistrar, srv LuxServiceServer) {
	// If the following call pancis, it indicates UnimplementedLuxServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LuxService_ServiceDesc, srv)
}

func _LuxService_GetDayNightMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDayNightModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuxServiceServer).GetDayNightMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LuxService_GetDayNightMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuxServiceServer).GetDayNightMode(ctx, req.(*GetDayNightModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LuxService_ServiceDesc is the grpc.ServiceDesc for LuxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LuxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "canf22g2.grpc.LuxService",
	HandlerType: (*LuxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDayNightMode",
			Handler:    _LuxService_GetDayNightMode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lux.proto",
}
