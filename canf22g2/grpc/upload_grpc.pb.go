// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.0
// source: upload.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UnifiedFileTransfer_UploadFirmware_FullMethodName = "/canf22g2.grpc.UnifiedFileTransfer/UploadFirmware"
	UnifiedFileTransfer_UploadAIFile_FullMethodName   = "/canf22g2.grpc.UnifiedFileTransfer/UploadAIFile"
)

// UnifiedFileTransferClient is the client API for UnifiedFileTransfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnifiedFileTransferClient interface {
	UploadFirmware(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UnifiedChunk, UploadStatus], error)
	UploadAIFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UnifiedChunk, UploadStatus], error)
}

type unifiedFileTransferClient struct {
	cc grpc.ClientConnInterface
}

func NewUnifiedFileTransferClient(cc grpc.ClientConnInterface) UnifiedFileTransferClient {
	return &unifiedFileTransferClient{cc}
}

func (c *unifiedFileTransferClient) UploadFirmware(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UnifiedChunk, UploadStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UnifiedFileTransfer_ServiceDesc.Streams[0], UnifiedFileTransfer_UploadFirmware_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UnifiedChunk, UploadStatus]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UnifiedFileTransfer_UploadFirmwareClient = grpc.ClientStreamingClient[UnifiedChunk, UploadStatus]

func (c *unifiedFileTransferClient) UploadAIFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UnifiedChunk, UploadStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UnifiedFileTransfer_ServiceDesc.Streams[1], UnifiedFileTransfer_UploadAIFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UnifiedChunk, UploadStatus]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UnifiedFileTransfer_UploadAIFileClient = grpc.ClientStreamingClient[UnifiedChunk, UploadStatus]

// UnifiedFileTransferServer is the server API for UnifiedFileTransfer service.
// All implementations must embed UnimplementedUnifiedFileTransferServer
// for forward compatibility.
type UnifiedFileTransferServer interface {
	UploadFirmware(grpc.ClientStreamingServer[UnifiedChunk, UploadStatus]) error
	UploadAIFile(grpc.ClientStreamingServer[UnifiedChunk, UploadStatus]) error
	mustEmbedUnimplementedUnifiedFileTransferServer()
}

// UnimplementedUnifiedFileTransferServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUnifiedFileTransferServer struct{}

func (UnimplementedUnifiedFileTransferServer) UploadFirmware(grpc.ClientStreamingServer[UnifiedChunk, UploadStatus]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFirmware not implemented")
}
func (UnimplementedUnifiedFileTransferServer) UploadAIFile(grpc.ClientStreamingServer[UnifiedChunk, UploadStatus]) error {
	return status.Errorf(codes.Unimplemented, "method UploadAIFile not implemented")
}
func (UnimplementedUnifiedFileTransferServer) mustEmbedUnimplementedUnifiedFileTransferServer() {}
func (UnimplementedUnifiedFileTransferServer) testEmbeddedByValue()                             {}

// UnsafeUnifiedFileTransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnifiedFileTransferServer will
// result in compilation errors.
type UnsafeUnifiedFileTransferServer interface {
	mustEmbedUnimplementedUnifiedFileTransferServer()
}

func RegisterUnifiedFileTransferServer(s grpc.ServiceRegistrar, srv UnifiedFileTransferServer) {
	// If the following call pancis, it indicates UnimplementedUnifiedFileTransferServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UnifiedFileTransfer_ServiceDesc, srv)
}

func _UnifiedFileTransfer_UploadFirmware_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UnifiedFileTransferServer).UploadFirmware(&grpc.GenericServerStream[UnifiedChunk, UploadStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UnifiedFileTransfer_UploadFirmwareServer = grpc.ClientStreamingServer[UnifiedChunk, UploadStatus]

func _UnifiedFileTransfer_UploadAIFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UnifiedFileTransferServer).UploadAIFile(&grpc.GenericServerStream[UnifiedChunk, UploadStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UnifiedFileTransfer_UploadAIFileServer = grpc.ClientStreamingServer[UnifiedChunk, UploadStatus]

// UnifiedFileTransfer_ServiceDesc is the grpc.ServiceDesc for UnifiedFileTransfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnifiedFileTransfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "canf22g2.grpc.UnifiedFileTransfer",
	HandlerType: (*UnifiedFileTransferServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFirmware",
			Handler:       _UnifiedFileTransfer_UploadFirmware_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadAIFile",
			Handler:       _UnifiedFileTransfer_UploadAIFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "upload.proto",
}
