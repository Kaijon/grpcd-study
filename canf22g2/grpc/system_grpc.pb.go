// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.0
// source: system.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeviceInfoService_GetAllSystemInfo_FullMethodName = "/canf22g2.grpc.DeviceInfoService/GetAllSystemInfo"
	DeviceInfoService_SetTime_FullMethodName          = "/canf22g2.grpc.DeviceInfoService/SetTime"
	DeviceInfoService_RunCmd_FullMethodName           = "/canf22g2.grpc.DeviceInfoService/RunCmd"
	DeviceInfoService_GetAlprStatus_FullMethodName    = "/canf22g2.grpc.DeviceInfoService/GetAlprStatus"
	DeviceInfoService_SetAlprStatus_FullMethodName    = "/canf22g2.grpc.DeviceInfoService/SetAlprStatus"
)

// DeviceInfoServiceClient is the client API for DeviceInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceInfoServiceClient interface {
	GetAllSystemInfo(ctx context.Context, in *GetAllSystemInfoRequest, opts ...grpc.CallOption) (*GetAllSystemInfoResponse, error)
	SetTime(ctx context.Context, in *SetTimeRequest, opts ...grpc.CallOption) (*SetTimeResponse, error)
	RunCmd(ctx context.Context, in *RunCmdRequest, opts ...grpc.CallOption) (*RunCmdResponse, error)
	GetAlprStatus(ctx context.Context, in *GetAlprRequest, opts ...grpc.CallOption) (*GetAlprResponse, error)
	SetAlprStatus(ctx context.Context, in *SetAlprRequest, opts ...grpc.CallOption) (*SetAlprResponse, error)
}

type deviceInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceInfoServiceClient(cc grpc.ClientConnInterface) DeviceInfoServiceClient {
	return &deviceInfoServiceClient{cc}
}

func (c *deviceInfoServiceClient) GetAllSystemInfo(ctx context.Context, in *GetAllSystemInfoRequest, opts ...grpc.CallOption) (*GetAllSystemInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllSystemInfoResponse)
	err := c.cc.Invoke(ctx, DeviceInfoService_GetAllSystemInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInfoServiceClient) SetTime(ctx context.Context, in *SetTimeRequest, opts ...grpc.CallOption) (*SetTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTimeResponse)
	err := c.cc.Invoke(ctx, DeviceInfoService_SetTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInfoServiceClient) RunCmd(ctx context.Context, in *RunCmdRequest, opts ...grpc.CallOption) (*RunCmdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunCmdResponse)
	err := c.cc.Invoke(ctx, DeviceInfoService_RunCmd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInfoServiceClient) GetAlprStatus(ctx context.Context, in *GetAlprRequest, opts ...grpc.CallOption) (*GetAlprResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAlprResponse)
	err := c.cc.Invoke(ctx, DeviceInfoService_GetAlprStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInfoServiceClient) SetAlprStatus(ctx context.Context, in *SetAlprRequest, opts ...grpc.CallOption) (*SetAlprResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAlprResponse)
	err := c.cc.Invoke(ctx, DeviceInfoService_SetAlprStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceInfoServiceServer is the server API for DeviceInfoService service.
// All implementations must embed UnimplementedDeviceInfoServiceServer
// for forward compatibility.
type DeviceInfoServiceServer interface {
	GetAllSystemInfo(context.Context, *GetAllSystemInfoRequest) (*GetAllSystemInfoResponse, error)
	SetTime(context.Context, *SetTimeRequest) (*SetTimeResponse, error)
	RunCmd(context.Context, *RunCmdRequest) (*RunCmdResponse, error)
	GetAlprStatus(context.Context, *GetAlprRequest) (*GetAlprResponse, error)
	SetAlprStatus(context.Context, *SetAlprRequest) (*SetAlprResponse, error)
	mustEmbedUnimplementedDeviceInfoServiceServer()
}

// UnimplementedDeviceInfoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeviceInfoServiceServer struct{}

func (UnimplementedDeviceInfoServiceServer) GetAllSystemInfo(context.Context, *GetAllSystemInfoRequest) (*GetAllSystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSystemInfo not implemented")
}
func (UnimplementedDeviceInfoServiceServer) SetTime(context.Context, *SetTimeRequest) (*SetTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTime not implemented")
}
func (UnimplementedDeviceInfoServiceServer) RunCmd(context.Context, *RunCmdRequest) (*RunCmdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCmd not implemented")
}
func (UnimplementedDeviceInfoServiceServer) GetAlprStatus(context.Context, *GetAlprRequest) (*GetAlprResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlprStatus not implemented")
}
func (UnimplementedDeviceInfoServiceServer) SetAlprStatus(context.Context, *SetAlprRequest) (*SetAlprResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAlprStatus not implemented")
}
func (UnimplementedDeviceInfoServiceServer) mustEmbedUnimplementedDeviceInfoServiceServer() {}
func (UnimplementedDeviceInfoServiceServer) testEmbeddedByValue()                           {}

// UnsafeDeviceInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceInfoServiceServer will
// result in compilation errors.
type UnsafeDeviceInfoServiceServer interface {
	mustEmbedUnimplementedDeviceInfoServiceServer()
}

func RegisterDeviceInfoServiceServer(s grpc.ServiceRegistrar, srv DeviceInfoServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeviceInfoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeviceInfoService_ServiceDesc, srv)
}

func _DeviceInfoService_GetAllSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInfoServiceServer).GetAllSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInfoService_GetAllSystemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInfoServiceServer).GetAllSystemInfo(ctx, req.(*GetAllSystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInfoService_SetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInfoServiceServer).SetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInfoService_SetTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInfoServiceServer).SetTime(ctx, req.(*SetTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInfoService_RunCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInfoServiceServer).RunCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInfoService_RunCmd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInfoServiceServer).RunCmd(ctx, req.(*RunCmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInfoService_GetAlprStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlprRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInfoServiceServer).GetAlprStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInfoService_GetAlprStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInfoServiceServer).GetAlprStatus(ctx, req.(*GetAlprRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInfoService_SetAlprStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAlprRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInfoServiceServer).SetAlprStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInfoService_SetAlprStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInfoServiceServer).SetAlprStatus(ctx, req.(*SetAlprRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceInfoService_ServiceDesc is the grpc.ServiceDesc for DeviceInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "canf22g2.grpc.DeviceInfoService",
	HandlerType: (*DeviceInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllSystemInfo",
			Handler:    _DeviceInfoService_GetAllSystemInfo_Handler,
		},
		{
			MethodName: "SetTime",
			Handler:    _DeviceInfoService_SetTime_Handler,
		},
		{
			MethodName: "RunCmd",
			Handler:    _DeviceInfoService_RunCmd_Handler,
		},
		{
			MethodName: "GetAlprStatus",
			Handler:    _DeviceInfoService_GetAlprStatus_Handler,
		},
		{
			MethodName: "SetAlprStatus",
			Handler:    _DeviceInfoService_SetAlprStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system.proto",
}
