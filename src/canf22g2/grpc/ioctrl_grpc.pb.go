// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: ioctrl.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LEDService_SetLEDs_FullMethodName = "/canf22g2.grpc.LEDService/SetLEDs"
	LEDService_GetLEDs_FullMethodName = "/canf22g2.grpc.LEDService/GetLEDs"
)

// LEDServiceClient is the client API for LEDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LEDServiceClient interface {
	SetLEDs(ctx context.Context, in *SetLEDsRequest, opts ...grpc.CallOption) (*SetLEDsResponse, error)
	GetLEDs(ctx context.Context, in *GetLEDsRequest, opts ...grpc.CallOption) (*GetLEDsResponse, error)
}

type lEDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLEDServiceClient(cc grpc.ClientConnInterface) LEDServiceClient {
	return &lEDServiceClient{cc}
}

func (c *lEDServiceClient) SetLEDs(ctx context.Context, in *SetLEDsRequest, opts ...grpc.CallOption) (*SetLEDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLEDsResponse)
	err := c.cc.Invoke(ctx, LEDService_SetLEDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lEDServiceClient) GetLEDs(ctx context.Context, in *GetLEDsRequest, opts ...grpc.CallOption) (*GetLEDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLEDsResponse)
	err := c.cc.Invoke(ctx, LEDService_GetLEDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LEDServiceServer is the server API for LEDService service.
// All implementations must embed UnimplementedLEDServiceServer
// for forward compatibility.
type LEDServiceServer interface {
	SetLEDs(context.Context, *SetLEDsRequest) (*SetLEDsResponse, error)
	GetLEDs(context.Context, *GetLEDsRequest) (*GetLEDsResponse, error)
	mustEmbedUnimplementedLEDServiceServer()
}

// UnimplementedLEDServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLEDServiceServer struct{}

func (UnimplementedLEDServiceServer) SetLEDs(context.Context, *SetLEDsRequest) (*SetLEDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLEDs not implemented")
}
func (UnimplementedLEDServiceServer) GetLEDs(context.Context, *GetLEDsRequest) (*GetLEDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLEDs not implemented")
}
func (UnimplementedLEDServiceServer) mustEmbedUnimplementedLEDServiceServer() {}
func (UnimplementedLEDServiceServer) testEmbeddedByValue()                    {}

// UnsafeLEDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LEDServiceServer will
// result in compilation errors.
type UnsafeLEDServiceServer interface {
	mustEmbedUnimplementedLEDServiceServer()
}

func RegisterLEDServiceServer(s grpc.ServiceRegistrar, srv LEDServiceServer) {
	// If the following call pancis, it indicates UnimplementedLEDServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LEDService_ServiceDesc, srv)
}

func _LEDService_SetLEDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLEDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LEDServiceServer).SetLEDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LEDService_SetLEDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LEDServiceServer).SetLEDs(ctx, req.(*SetLEDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LEDService_GetLEDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLEDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LEDServiceServer).GetLEDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LEDService_GetLEDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LEDServiceServer).GetLEDs(ctx, req.(*GetLEDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LEDService_ServiceDesc is the grpc.ServiceDesc for LEDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LEDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "canf22g2.grpc.LEDService",
	HandlerType: (*LEDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLEDs",
			Handler:    _LEDService_SetLEDs_Handler,
		},
		{
			MethodName: "GetLEDs",
			Handler:    _LEDService_GetLEDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ioctrl.proto",
}
