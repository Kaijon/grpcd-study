// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: network.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NetworkInfoService_GetIPv4_FullMethodName           = "/canf22g2.grpc.NetworkInfoService/GetIPv4"
	NetworkInfoService_UpdateIPv4_FullMethodName        = "/canf22g2.grpc.NetworkInfoService/UpdateIPv4"
	NetworkInfoService_GetIPv6_FullMethodName           = "/canf22g2.grpc.NetworkInfoService/GetIPv6"
	NetworkInfoService_GetAllNetworkInfo_FullMethodName = "/canf22g2.grpc.NetworkInfoService/GetAllNetworkInfo"
)

// NetworkInfoServiceClient is the client API for NetworkInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkInfoServiceClient interface {
	GetIPv4(ctx context.Context, in *GetIPv4Request, opts ...grpc.CallOption) (*GetIPv4Response, error)
	UpdateIPv4(ctx context.Context, in *UpdateIPv4Request, opts ...grpc.CallOption) (*UpdateIPv4Response, error)
	GetIPv6(ctx context.Context, in *GetIPv6Request, opts ...grpc.CallOption) (*GetIPv6Response, error)
	GetAllNetworkInfo(ctx context.Context, in *GetAllNetworkInfoRequest, opts ...grpc.CallOption) (*GetAllNetworkInfoResponse, error)
}

type networkInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkInfoServiceClient(cc grpc.ClientConnInterface) NetworkInfoServiceClient {
	return &networkInfoServiceClient{cc}
}

func (c *networkInfoServiceClient) GetIPv4(ctx context.Context, in *GetIPv4Request, opts ...grpc.CallOption) (*GetIPv4Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIPv4Response)
	err := c.cc.Invoke(ctx, NetworkInfoService_GetIPv4_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInfoServiceClient) UpdateIPv4(ctx context.Context, in *UpdateIPv4Request, opts ...grpc.CallOption) (*UpdateIPv4Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateIPv4Response)
	err := c.cc.Invoke(ctx, NetworkInfoService_UpdateIPv4_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInfoServiceClient) GetIPv6(ctx context.Context, in *GetIPv6Request, opts ...grpc.CallOption) (*GetIPv6Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIPv6Response)
	err := c.cc.Invoke(ctx, NetworkInfoService_GetIPv6_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInfoServiceClient) GetAllNetworkInfo(ctx context.Context, in *GetAllNetworkInfoRequest, opts ...grpc.CallOption) (*GetAllNetworkInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllNetworkInfoResponse)
	err := c.cc.Invoke(ctx, NetworkInfoService_GetAllNetworkInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkInfoServiceServer is the server API for NetworkInfoService service.
// All implementations must embed UnimplementedNetworkInfoServiceServer
// for forward compatibility.
type NetworkInfoServiceServer interface {
	GetIPv4(context.Context, *GetIPv4Request) (*GetIPv4Response, error)
	UpdateIPv4(context.Context, *UpdateIPv4Request) (*UpdateIPv4Response, error)
	GetIPv6(context.Context, *GetIPv6Request) (*GetIPv6Response, error)
	GetAllNetworkInfo(context.Context, *GetAllNetworkInfoRequest) (*GetAllNetworkInfoResponse, error)
	mustEmbedUnimplementedNetworkInfoServiceServer()
}

// UnimplementedNetworkInfoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNetworkInfoServiceServer struct{}

func (UnimplementedNetworkInfoServiceServer) GetIPv4(context.Context, *GetIPv4Request) (*GetIPv4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPv4 not implemented")
}
func (UnimplementedNetworkInfoServiceServer) UpdateIPv4(context.Context, *UpdateIPv4Request) (*UpdateIPv4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIPv4 not implemented")
}
func (UnimplementedNetworkInfoServiceServer) GetIPv6(context.Context, *GetIPv6Request) (*GetIPv6Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPv6 not implemented")
}
func (UnimplementedNetworkInfoServiceServer) GetAllNetworkInfo(context.Context, *GetAllNetworkInfoRequest) (*GetAllNetworkInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNetworkInfo not implemented")
}
func (UnimplementedNetworkInfoServiceServer) mustEmbedUnimplementedNetworkInfoServiceServer() {}
func (UnimplementedNetworkInfoServiceServer) testEmbeddedByValue()                            {}

// UnsafeNetworkInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkInfoServiceServer will
// result in compilation errors.
type UnsafeNetworkInfoServiceServer interface {
	mustEmbedUnimplementedNetworkInfoServiceServer()
}

func RegisterNetworkInfoServiceServer(s grpc.ServiceRegistrar, srv NetworkInfoServiceServer) {
	// If the following call pancis, it indicates UnimplementedNetworkInfoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NetworkInfoService_ServiceDesc, srv)
}

func _NetworkInfoService_GetIPv4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPv4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInfoServiceServer).GetIPv4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkInfoService_GetIPv4_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInfoServiceServer).GetIPv4(ctx, req.(*GetIPv4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInfoService_UpdateIPv4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIPv4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInfoServiceServer).UpdateIPv4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkInfoService_UpdateIPv4_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInfoServiceServer).UpdateIPv4(ctx, req.(*UpdateIPv4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInfoService_GetIPv6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPv6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInfoServiceServer).GetIPv6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkInfoService_GetIPv6_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInfoServiceServer).GetIPv6(ctx, req.(*GetIPv6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInfoService_GetAllNetworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllNetworkInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInfoServiceServer).GetAllNetworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkInfoService_GetAllNetworkInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInfoServiceServer).GetAllNetworkInfo(ctx, req.(*GetAllNetworkInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkInfoService_ServiceDesc is the grpc.ServiceDesc for NetworkInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "canf22g2.grpc.NetworkInfoService",
	HandlerType: (*NetworkInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIPv4",
			Handler:    _NetworkInfoService_GetIPv4_Handler,
		},
		{
			MethodName: "UpdateIPv4",
			Handler:    _NetworkInfoService_UpdateIPv4_Handler,
		},
		{
			MethodName: "GetIPv6",
			Handler:    _NetworkInfoService_GetIPv6_Handler,
		},
		{
			MethodName: "GetAllNetworkInfo",
			Handler:    _NetworkInfoService_GetAllNetworkInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network.proto",
}
