// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.12
// source: watermark.proto

package grpc

import (
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Watermark information with channel differentiation
type GetAllWatermarkInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       int32                  `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"` // Channel identifier
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllWatermarkInfoRequest) Reset() {
	*x = GetAllWatermarkInfoRequest{}
	mi := &file_watermark_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllWatermarkInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllWatermarkInfoRequest) ProtoMessage() {}

func (x *GetAllWatermarkInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllWatermarkInfoRequest.ProtoReflect.Descriptor instead.
func (*GetAllWatermarkInfoRequest) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{0}
}

func (x *GetAllWatermarkInfoRequest) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

type GetAllWatermarkInfoResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Username         string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	OptionUserName   bool                   `protobuf:"varint,2,opt,name=OptionUserName,proto3" json:"OptionUserName,omitempty"`
	OptionDeviceName bool                   `protobuf:"varint,3,opt,name=OptionDeviceName,proto3" json:"OptionDeviceName,omitempty"`
	OptionGPS        bool                   `protobuf:"varint,4,opt,name=OptionGPS,proto3" json:"OptionGPS,omitempty"`
	OptionTime       bool                   `protobuf:"varint,5,opt,name=OptionTime,proto3" json:"OptionTime,omitempty"`
	OptionLogo       bool                   `protobuf:"varint,6,opt,name=OptionLogo,proto3" json:"OptionLogo,omitempty"`
	OptionExposure   bool                   `protobuf:"varint,7,opt,name=OptionExposure,proto3" json:"OptionExposure,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetAllWatermarkInfoResponse) Reset() {
	*x = GetAllWatermarkInfoResponse{}
	mi := &file_watermark_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllWatermarkInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllWatermarkInfoResponse) ProtoMessage() {}

func (x *GetAllWatermarkInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllWatermarkInfoResponse.ProtoReflect.Descriptor instead.
func (*GetAllWatermarkInfoResponse) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{1}
}

func (x *GetAllWatermarkInfoResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetAllWatermarkInfoResponse) GetOptionUserName() bool {
	if x != nil {
		return x.OptionUserName
	}
	return false
}

func (x *GetAllWatermarkInfoResponse) GetOptionDeviceName() bool {
	if x != nil {
		return x.OptionDeviceName
	}
	return false
}

func (x *GetAllWatermarkInfoResponse) GetOptionGPS() bool {
	if x != nil {
		return x.OptionGPS
	}
	return false
}

func (x *GetAllWatermarkInfoResponse) GetOptionTime() bool {
	if x != nil {
		return x.OptionTime
	}
	return false
}

func (x *GetAllWatermarkInfoResponse) GetOptionLogo() bool {
	if x != nil {
		return x.OptionLogo
	}
	return false
}

func (x *GetAllWatermarkInfoResponse) GetOptionExposure() bool {
	if x != nil {
		return x.OptionExposure
	}
	return false
}

type SetAllWatermarkInfoRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Username         string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	OptionUserName   bool                   `protobuf:"varint,2,opt,name=OptionUserName,proto3" json:"OptionUserName,omitempty"`
	OptionDeviceName bool                   `protobuf:"varint,3,opt,name=OptionDeviceName,proto3" json:"OptionDeviceName,omitempty"`
	OptionGPS        bool                   `protobuf:"varint,4,opt,name=OptionGPS,proto3" json:"OptionGPS,omitempty"`
	OptionTime       bool                   `protobuf:"varint,5,opt,name=OptionTime,proto3" json:"OptionTime,omitempty"`
	OptionLogo       *wrappers.BoolValue    `protobuf:"bytes,6,opt,name=OptionLogo,proto3" json:"OptionLogo,omitempty"`
	OptionExposure   *wrappers.BoolValue    `protobuf:"bytes,7,opt,name=OptionExposure,proto3" json:"OptionExposure,omitempty"`
	Channel          int32                  `protobuf:"varint,8,opt,name=channel,proto3" json:"channel,omitempty"` // Channel identifier
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SetAllWatermarkInfoRequest) Reset() {
	*x = SetAllWatermarkInfoRequest{}
	mi := &file_watermark_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAllWatermarkInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAllWatermarkInfoRequest) ProtoMessage() {}

func (x *SetAllWatermarkInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAllWatermarkInfoRequest.ProtoReflect.Descriptor instead.
func (*SetAllWatermarkInfoRequest) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{2}
}

func (x *SetAllWatermarkInfoRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SetAllWatermarkInfoRequest) GetOptionUserName() bool {
	if x != nil {
		return x.OptionUserName
	}
	return false
}

func (x *SetAllWatermarkInfoRequest) GetOptionDeviceName() bool {
	if x != nil {
		return x.OptionDeviceName
	}
	return false
}

func (x *SetAllWatermarkInfoRequest) GetOptionGPS() bool {
	if x != nil {
		return x.OptionGPS
	}
	return false
}

func (x *SetAllWatermarkInfoRequest) GetOptionTime() bool {
	if x != nil {
		return x.OptionTime
	}
	return false
}

func (x *SetAllWatermarkInfoRequest) GetOptionLogo() *wrappers.BoolValue {
	if x != nil {
		return x.OptionLogo
	}
	return nil
}

func (x *SetAllWatermarkInfoRequest) GetOptionExposure() *wrappers.BoolValue {
	if x != nil {
		return x.OptionExposure
	}
	return nil
}

func (x *SetAllWatermarkInfoRequest) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

type SetAllWatermarkInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAllWatermarkInfoResponse) Reset() {
	*x = SetAllWatermarkInfoResponse{}
	mi := &file_watermark_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAllWatermarkInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAllWatermarkInfoResponse) ProtoMessage() {}

func (x *SetAllWatermarkInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_watermark_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAllWatermarkInfoResponse.ProtoReflect.Descriptor instead.
func (*SetAllWatermarkInfoResponse) Descriptor() ([]byte, []int) {
	return file_watermark_proto_rawDescGZIP(), []int{3}
}

func (x *SetAllWatermarkInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_watermark_proto protoreflect.FileDescriptor

const file_watermark_proto_rawDesc = "" +
	"\n" +
	"\x0fwatermark.proto\x12\rcanf22g2.grpc\x1a\x1cgoogle/api/annotations.proto\x1a\x0ewrappers.proto\"6\n" +
	"\x1aGetAllWatermarkInfoRequest\x12\x18\n" +
	"\achannel\x18\x01 \x01(\x05R\achannel\"\x93\x02\n" +
	"\x1bGetAllWatermarkInfoResponse\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12&\n" +
	"\x0eOptionUserName\x18\x02 \x01(\bR\x0eOptionUserName\x12*\n" +
	"\x10OptionDeviceName\x18\x03 \x01(\bR\x10OptionDeviceName\x12\x1c\n" +
	"\tOptionGPS\x18\x04 \x01(\bR\tOptionGPS\x12\x1e\n" +
	"\n" +
	"OptionTime\x18\x05 \x01(\bR\n" +
	"OptionTime\x12\x1e\n" +
	"\n" +
	"OptionLogo\x18\x06 \x01(\bR\n" +
	"OptionLogo\x12&\n" +
	"\x0eOptionExposure\x18\a \x01(\bR\x0eOptionExposure\"\xe4\x02\n" +
	"\x1aSetAllWatermarkInfoRequest\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12&\n" +
	"\x0eOptionUserName\x18\x02 \x01(\bR\x0eOptionUserName\x12*\n" +
	"\x10OptionDeviceName\x18\x03 \x01(\bR\x10OptionDeviceName\x12\x1c\n" +
	"\tOptionGPS\x18\x04 \x01(\bR\tOptionGPS\x12\x1e\n" +
	"\n" +
	"OptionTime\x18\x05 \x01(\bR\n" +
	"OptionTime\x12:\n" +
	"\n" +
	"OptionLogo\x18\x06 \x01(\v2\x1a.google.protobuf.BoolValueR\n" +
	"OptionLogo\x12B\n" +
	"\x0eOptionExposure\x18\a \x01(\v2\x1a.google.protobuf.BoolValueR\x0eOptionExposure\x12\x18\n" +
	"\achannel\x18\b \x01(\x05R\achannel\"7\n" +
	"\x1bSetAllWatermarkInfoResponse\x12\x18\n" +
	"\aMessage\x18\x01 \x01(\tR\aMessage2\xa5\x02\n" +
	"\x14WatermarkInfoService\x12\x83\x01\n" +
	"\x13GetAllWatermarkInfo\x12).canf22g2.grpc.GetAllWatermarkInfoRequest\x1a*.canf22g2.grpc.GetAllWatermarkInfoResponse\"\x15\x82\xd3\xe4\x93\x02\x0f\x12\r/v1/watermark\x12\x86\x01\n" +
	"\x13SetAllWatermarkInfo\x12).canf22g2.grpc.SetAllWatermarkInfoRequest\x1a*.canf22g2.grpc.SetAllWatermarkInfoResponse\"\x18\x82\xd3\xe4\x93\x02\x12:\x01*\"\r/v1/watermarkB\x0fZ\rcanf22g2/grpcb\x06proto3"

var (
	file_watermark_proto_rawDescOnce sync.Once
	file_watermark_proto_rawDescData []byte
)

func file_watermark_proto_rawDescGZIP() []byte {
	file_watermark_proto_rawDescOnce.Do(func() {
		file_watermark_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_watermark_proto_rawDesc), len(file_watermark_proto_rawDesc)))
	})
	return file_watermark_proto_rawDescData
}

var file_watermark_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_watermark_proto_goTypes = []any{
	(*GetAllWatermarkInfoRequest)(nil),  // 0: canf22g2.grpc.GetAllWatermarkInfoRequest
	(*GetAllWatermarkInfoResponse)(nil), // 1: canf22g2.grpc.GetAllWatermarkInfoResponse
	(*SetAllWatermarkInfoRequest)(nil),  // 2: canf22g2.grpc.SetAllWatermarkInfoRequest
	(*SetAllWatermarkInfoResponse)(nil), // 3: canf22g2.grpc.SetAllWatermarkInfoResponse
	(*wrappers.BoolValue)(nil),          // 4: google.protobuf.BoolValue
}
var file_watermark_proto_depIdxs = []int32{
	4, // 0: canf22g2.grpc.SetAllWatermarkInfoRequest.OptionLogo:type_name -> google.protobuf.BoolValue
	4, // 1: canf22g2.grpc.SetAllWatermarkInfoRequest.OptionExposure:type_name -> google.protobuf.BoolValue
	0, // 2: canf22g2.grpc.WatermarkInfoService.GetAllWatermarkInfo:input_type -> canf22g2.grpc.GetAllWatermarkInfoRequest
	2, // 3: canf22g2.grpc.WatermarkInfoService.SetAllWatermarkInfo:input_type -> canf22g2.grpc.SetAllWatermarkInfoRequest
	1, // 4: canf22g2.grpc.WatermarkInfoService.GetAllWatermarkInfo:output_type -> canf22g2.grpc.GetAllWatermarkInfoResponse
	3, // 5: canf22g2.grpc.WatermarkInfoService.SetAllWatermarkInfo:output_type -> canf22g2.grpc.SetAllWatermarkInfoResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_watermark_proto_init() }
func file_watermark_proto_init() {
	if File_watermark_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_watermark_proto_rawDesc), len(file_watermark_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_watermark_proto_goTypes,
		DependencyIndexes: file_watermark_proto_depIdxs,
		MessageInfos:      file_watermark_proto_msgTypes,
	}.Build()
	File_watermark_proto = out.File
	file_watermark_proto_goTypes = nil
	file_watermark_proto_depIdxs = nil
}
